using System;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Threading;
using Framework.Core.Utils;
using System.Collections.Generic;
using System.Linq;
using System.Data.SqlClient;
using Framework.Core.Contracts;
using System.Data;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Configuration;

namespace Framework.Core.EntityFrameworkCore
{
    public abstract class EfCoreDbContext<TContext> : DbContext, IEfCoreDbContext
        where TContext : DbContext
    {
        private readonly ICurrentUserService currentUserService;
        [Inject]
        public IConfiguration configuration { get; set; }
        protected EfCoreDbContext(DbContextOptions<TContext> options, ICurrentUserService currentUserService) : base(options)
        {
            this.currentUserService = currentUserService;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.AddShadowProperties();
            modelBuilder.SetGlobalQueryFilters();

            base.OnModelCreating(modelBuilder);
        }

        public override int SaveChanges()
        {
            try
            {
                ChangeTracker.SetShadowProperties();
                ChangeTracker.Validate();

                return base.SaveChanges();
            }
            catch (DbUpdateConcurrencyException ex)
            {
                throw new Exception(ex.Message, ex);
            }
            finally
            {
                ChangeTracker.AutoDetectChangesEnabled = true;
            }
        }

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            try
            {
                ChangeTracker.SetShadowProperties();
                ChangeTracker.Validate();
                await SaveChangesWithAuditAsync();
                return await base.SaveChangesAsync(cancellationToken);

            }
            catch (DbUpdateConcurrencyException ex)
            {
                throw new Exception(ex.Message, ex);
            }
            finally
            {
                ChangeTracker.AutoDetectChangesEnabled = true;
            }
        }


        public virtual async Task SaveChangesWithAuditAsync(CancellationToken cancellationToken = default, string userName = null)
        {
            ChangeTracker.SetShadowProperties(userName);
            ChangeTracker.Validate();
            var auditEntries = OnBeforeSaveChanges();

            await SaveChangesAsync();
            await OnAfterSaveChanges(auditEntries);
        }

        private List<AuditEntry> OnBeforeSaveChanges()
        {

            var currentUserName = this.currentUserService.CurrentUserName;
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            auditEntry.CrudOperation = "Add";
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            auditEntry.CrudOperation = "Delete";
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                if (property.CurrentValue?.Equals(property.OriginalValue) == false)
                                {
                                    auditEntry.OldValues[propertyName] = property.OriginalValue;
                                    auditEntry.NewValues[propertyName] = property.CurrentValue;
                                }
                            }
                            auditEntry.CrudOperation = "Update";
                            break;
                    }
                    auditEntry.CreatedBy = currentUserName;
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                //base.Add(auditEntry.ToAudit());
                CreateLogs(auditEntry.ToAudit());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            var currentUserName = this.currentUserService.CurrentUserName;
            if (auditEntries == null || auditEntries.Count == 0)
                return SaveChangesAsync();

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                auditEntry.CreatedBy = currentUserName;
                // Save the Audit entry
                //base.AddAsync(auditEntry.ToAudit());
                Task.FromResult(CreateLogs(auditEntry.ToAudit()));

            }

            return base.SaveChangesAsync();
        }

        public async Task CreateLogs(Audit auditEntry)
        {
            try
            {
                string connectionString = this.Database.GetConnectionString();

                using (SqlConnection con = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand("spINSERT_audit_record", con);
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@CrudOperation", auditEntry.CrudOperation);
                    cmd.Parameters.AddWithValue("@TableName", auditEntry.TableName);
                    cmd.Parameters.AddWithValue("@KeyValues", auditEntry.KeyValues);
                    cmd.Parameters.AddWithValue("@OldValues", auditEntry.OldValues);
                    cmd.Parameters.AddWithValue("@NewValues", auditEntry.NewValues);
                    cmd.Parameters.AddWithValue("@CreatedBy", auditEntry.CreatedBy);
                    con.Open();
                    cmd.ExecuteNonQuery();
                    con.Close();

                }
            }
            catch (Exception E)
            {

                throw E;
            }

        }


    }
    public static class ConnectionString
    {

        
        private static string cName = "Server=RY0DEVCONSQL1\\TSJILSTG,62537;Initial Catalog=RegTech_STG_Second_DB;integrated security=false;user id=AppTsjilSTG ;password=Q!L$#E*Fdsjvcbfkx125Ui3;MultipleActiveResultSets=true";
        public static string CName
        {
            get => cName;
        }
    }
}
